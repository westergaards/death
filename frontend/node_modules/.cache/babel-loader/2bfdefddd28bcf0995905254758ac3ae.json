{"ast":null,"code":"var _jsxFileName = \"/Users/westegaards/workspace/covid/frontend/src/components/charts/StateTestChart.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport { useStateStats } from \"./StateChartWrapper\";\nconst highChartOptions = Highcharts.getOptions();\nconst color = highChartOptions && Array.isArray(highChartOptions.colors) ? highChartOptions.colors[0] : \"rgb(255, 255, 255)\";\nconst options = {\n  chart: {\n    zoomType: \"x\"\n  },\n  xAxis: {\n    type: \"datetime\"\n  },\n  yAxis: {\n    title: {\n      text: \"Deaths\"\n    }\n  },\n  legend: {\n    enabled: false\n  },\n  plotOptions: {\n    area: {\n      fillColor: {\n        linearGradient: {\n          x1: 0,\n          y1: 0,\n          x2: 0,\n          y2: 1\n        },\n        stops: [[0, color], [1, Highcharts.color(color).setOpacity(0).get(\"rgba\")]]\n      },\n      marker: {\n        radius: 2\n      },\n      lineWidth: 1,\n      states: {\n        hover: {\n          lineWidth: 1\n        }\n      },\n      threshold: null\n    }\n  },\n  tooltip: {\n    pointFormat: \"{series.name}: <b>{point.y:,.0f}</b>\"\n  },\n  series: [{\n    name: \"deaths\",\n    type: \"area\",\n    data: []\n  }]\n};\nexport const StateTestChart = props => {\n  const [states, setStates] = useStateStats();\n  const [chartOptions, setChartOptions] = useState(options);\n  useEffect(() => {\n    if (states) {\n      const newOptions = { ...chartOptions,\n        title: {\n          text: props.state\n        }\n      };\n      console.log(\"states\", states);\n      let filtered = states.filter(s => s.state === props.state).sort((a, b) => a.datetime - b.datetime);\n      let totalTestResults = filtered.map(f => {\n        return [f.datetime, f.totalTestResults || 0];\n      });\n      let totalNegativeTestResultsData = filtered.map(f => {\n        return [f.datetime, f.negative || 0];\n      });\n      let totalPositiveTestResultsData = filtered.map(f => {\n        return [f.datetime, f.positive || 0];\n      });\n      console.log(\"stateData\");\n      newOptions.series = [{\n        name: \"Total Test Results\",\n        type: \"area\",\n        data: totalTestResults\n      }, {\n        name: \"Negative Test Results\",\n        type: \"area\",\n        data: totalNegativeTestResultsData\n      }, {\n        name: \"Positive Test Results\",\n        type: \"area\",\n        data: totalPositiveTestResultsData\n      }];\n\n      if (props.state === \"KS\") {\n        console.log(filtered);\n      }\n\n      setChartOptions(newOptions);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [states]);\n  return /*#__PURE__*/React.createElement(HighchartsReact, {\n    highcharts: Highcharts,\n    options: chartOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 10\n    }\n  });\n};","map":{"version":3,"sources":["/Users/westegaards/workspace/covid/frontend/src/components/charts/StateTestChart.tsx"],"names":["React","useEffect","useState","Highcharts","HighchartsReact","useStateStats","highChartOptions","getOptions","color","Array","isArray","colors","options","chart","zoomType","xAxis","type","yAxis","title","text","legend","enabled","plotOptions","area","fillColor","linearGradient","x1","y1","x2","y2","stops","setOpacity","get","marker","radius","lineWidth","states","hover","threshold","tooltip","pointFormat","series","name","data","StateTestChart","props","setStates","chartOptions","setChartOptions","newOptions","state","console","log","filtered","filter","s","sort","a","b","datetime","totalTestResults","map","f","totalNegativeTestResultsData","negative","totalPositiveTestResultsData","positive"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport data from \"../../data/stats.json\";\nimport { useStateStats } from \"./StateChartWrapper\";\n\nconst highChartOptions = Highcharts.getOptions();\nconst color =\n  highChartOptions && Array.isArray(highChartOptions.colors)\n    ? highChartOptions.colors[0]\n    : \"rgb(255, 255, 255)\";\n\nconst options = {\n  chart: {\n    zoomType: \"x\",\n  },\n  xAxis: {\n    type: \"datetime\",\n  },\n  yAxis: {\n    title: {\n      text: \"Deaths\",\n    },\n  },\n  legend: {\n    enabled: false,\n  },\n  plotOptions: {\n    area: {\n      fillColor: {\n        linearGradient: {\n          x1: 0,\n          y1: 0,\n          x2: 0,\n          y2: 1,\n        },\n        stops: [\n          [0, color],\n          [1, Highcharts.color(color).setOpacity(0).get(\"rgba\")],\n        ],\n      },\n      marker: {\n        radius: 2,\n      },\n      lineWidth: 1,\n      states: {\n        hover: {\n          lineWidth: 1,\n        },\n      },\n      threshold: null,\n    },\n  },\n  tooltip: {\n    pointFormat: \"{series.name}: <b>{point.y:,.0f}</b>\",\n  },\n  series: [\n    {\n      name: \"deaths\",\n      type: \"area\",\n      data: [] as any,\n    },\n  ],\n};\n\nexport const StateTestChart = (props: { state: string }) => {\n  const [states, setStates] = useStateStats();\n  const [chartOptions, setChartOptions] = useState(options);\n\n  useEffect(() => {\n    if (states) {\n      const newOptions = { ...chartOptions, title: { text: props.state } };\n      console.log(\"states\", states);\n      let filtered = states\n        .filter((s) => s.state === props.state)\n        .sort((a, b) => a.datetime - b.datetime);\n\n      let totalTestResults = filtered.map((f) => {\n        return [f.datetime, f.totalTestResults || 0];\n      });\n\n      let totalNegativeTestResultsData = filtered.map((f) => {\n        return [f.datetime, f.negative || 0];\n      });\n\n      let totalPositiveTestResultsData = filtered.map((f) => {\n        return [f.datetime, f.positive || 0];\n      });\n\n      console.log(\"stateData\");\n\n      newOptions.series = [\n        {\n          name: \"Total Test Results\",\n          type: \"area\",\n          data: totalTestResults,\n        },\n        {\n          name: \"Negative Test Results\",\n          type: \"area\",\n          data: totalNegativeTestResultsData,\n        },\n        {\n          name: \"Positive Test Results\",\n          type: \"area\",\n          data: totalPositiveTestResultsData,\n        },\n      ];\n\n      if (props.state === \"KS\") {\n        console.log(filtered);\n      }\n\n      setChartOptions(newOptions);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [states]);\n\n  return <HighchartsReact highcharts={Highcharts} options={chartOptions} />;\n};\n"]},"metadata":{},"sourceType":"module"}