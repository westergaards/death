{"ast":null,"code":"var _jsxFileName = \"/Users/westegaards/workspace/covid/frontend/src/components/charts/BasicChart.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport * as Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport { byCountryTotalAllStatus } from \"../../utils/covidApi\";\nimport { useCountryStats } from \"../../App\";\nimport { timeline } from \"../models/timeline\";\nimport AnnotationsModule from \"highcharts/modules/annotations\";\nAnnotationsModule(Highcharts);\nconst highChartOptions = Highcharts.getOptions();\nconst color = highChartOptions && Array.isArray(highChartOptions.colors) ? highChartOptions.colors[0] : \"rgb(255, 255, 255)\";\nconst options = {\n  title: {\n    text: \"US Deaths by Day\"\n  },\n  chart: {\n    zoomType: \"x\"\n  },\n  xAxis: {\n    type: \"datetime\"\n  },\n  yAxis: {\n    title: {\n      text: \"Deaths\"\n    },\n    min: 0\n  },\n  legend: {\n    enabled: false\n  },\n  annotations: [{\n    // labelOptions: {\n    //   backgroundColor: \"rgba(255,255,255,0.5)\",\n    //   verticalAlign: \"top\",\n    //   y: -40,\n    // },\n    labels: []\n  }],\n  plotOptions: {\n    area: {\n      fillColor: {\n        linearGradient: {\n          x1: 0,\n          y1: 0,\n          x2: 0,\n          y2: 1\n        },\n        stops: [[0, color], [1, Highcharts.color(color).setOpacity(0).get(\"rgba\")]]\n      },\n      marker: {\n        radius: 2\n      },\n      lineWidth: 1,\n      states: {\n        hover: {\n          lineWidth: 1\n        }\n      },\n      threshold: null\n    }\n  },\n  series: [{\n    name: \"deaths\",\n    type: \"area\",\n    data: []\n  }]\n};\nexport const BasicChart = () => {\n  const [value, setValue] = useCountryStats();\n  const [chartOptions, setChartOptions] = useState(null); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await byCountryTotalAllStatus();\n      setValue(result.data);\n    };\n\n    fetchData();\n  }, [setValue]);\n  useEffect(() => {\n    if (value) {\n      const newOptions = { ...options\n      };\n      let series = value.map(f => {\n        return [new Date(f.Date).getTime(), f.Deaths];\n      });\n\n      for (const point of series) {\n        let [datetime, deaths] = point;\n\n        if (timeline[datetime]) {\n          let label = {\n            point: {\n              xAxis: 0,\n              yAxis: 0,\n              x: datetime,\n              y: deaths\n            },\n            text: timeline[datetime]\n          };\n          newOptions.annotations[0].labels.push(label);\n        }\n      }\n\n      newOptions.series = [{\n        name: \"deaths\",\n        type: \"area\",\n        data: series\n      }];\n      setChartOptions(newOptions);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [value]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 5\n    }\n  }, !chartOptions ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }, \"blah\") : /*#__PURE__*/React.createElement(HighchartsReact, {\n    highcharts: Highcharts,\n    options: chartOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/westegaards/workspace/covid/frontend/src/components/charts/BasicChart.tsx"],"names":["React","useEffect","useState","Highcharts","HighchartsReact","byCountryTotalAllStatus","useCountryStats","timeline","AnnotationsModule","highChartOptions","getOptions","color","Array","isArray","colors","options","title","text","chart","zoomType","xAxis","type","yAxis","min","legend","enabled","annotations","labels","plotOptions","area","fillColor","linearGradient","x1","y1","x2","y2","stops","setOpacity","get","marker","radius","lineWidth","states","hover","threshold","series","name","data","BasicChart","value","setValue","chartOptions","setChartOptions","fetchData","result","newOptions","map","f","Date","getTime","Deaths","point","datetime","deaths","label","x","y","push"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport * as Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport { byCountryTotalAllStatus } from \"../../utils/covidApi\";\nimport { useCountryStats } from \"../../App\";\nimport { timeline } from \"../models/timeline\";\n\nimport AnnotationsModule from \"highcharts/modules/annotations\";\nAnnotationsModule(Highcharts);\n\nconst highChartOptions = Highcharts.getOptions();\nconst color =\n  highChartOptions && Array.isArray(highChartOptions.colors)\n    ? highChartOptions.colors[0]\n    : \"rgb(255, 255, 255)\";\n\nconst options = {\n  title: {\n    text: \"US Deaths by Day\",\n  },\n  chart: {\n    zoomType: \"x\",\n  },\n  xAxis: {\n    type: \"datetime\",\n  },\n  yAxis: {\n    title: {\n      text: \"Deaths\",\n    },\n    min: 0,\n  },\n  legend: {\n    enabled: false,\n  },\n\n  annotations: [\n    {\n      // labelOptions: {\n      //   backgroundColor: \"rgba(255,255,255,0.5)\",\n      //   verticalAlign: \"top\",\n      //   y: -40,\n      // },\n      labels: [] as any,\n    },\n  ],\n  plotOptions: {\n    area: {\n      fillColor: {\n        linearGradient: {\n          x1: 0,\n          y1: 0,\n          x2: 0,\n          y2: 1,\n        },\n        stops: [\n          [0, color],\n          [1, Highcharts.color(color).setOpacity(0).get(\"rgba\")],\n        ],\n      },\n      marker: {\n        radius: 2,\n      },\n      lineWidth: 1,\n      states: {\n        hover: {\n          lineWidth: 1,\n        },\n      },\n      threshold: null,\n    },\n  },\n  series: [\n    {\n      name: \"deaths\",\n      type: \"area\",\n      data: [] as number[][],\n    },\n  ],\n};\n\nexport const BasicChart = () => {\n  const [value, setValue] = useCountryStats();\n  const [chartOptions, setChartOptions] = useState<any>(null);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await byCountryTotalAllStatus();\n      setValue(result.data);\n    };\n\n    fetchData();\n  }, [setValue]);\n\n  useEffect(() => {\n    if (value) {\n      const newOptions = { ...options };\n      let series = value.map((f) => {\n        return [new Date(f.Date).getTime(), f.Deaths];\n      });\n\n      for (const point of series) {\n        let [datetime, deaths] = point;\n        if (timeline[datetime]) {\n          let label = {\n            point: {\n              xAxis: 0,\n              yAxis: 0,\n              x: datetime,\n              y: deaths,\n            },\n            text: timeline[datetime],\n          };\n          newOptions.annotations[0].labels.push(label);\n        }\n      }\n\n      newOptions.series = [\n        {\n          name: \"deaths\",\n          type: \"area\",\n          data: series,\n        },\n      ];\n\n      setChartOptions(newOptions);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [value]);\n\n  return (\n    <div>\n      {!chartOptions ? (\n        <div>blah</div>\n      ) : (\n        <HighchartsReact highcharts={Highcharts} options={chartOptions} />\n      )}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}