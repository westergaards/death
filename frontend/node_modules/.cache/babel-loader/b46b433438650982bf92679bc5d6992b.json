{"ast":null,"code":"var _jsxFileName = \"/Users/westegaards/workspace/covid/frontend/src/components/charts/StateChart.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport { useStateStats } from \"./StateChartWrapper\";\nconst highChartOptions = Highcharts.getOptions();\nconst color = highChartOptions && Array.isArray(highChartOptions.colors) ? highChartOptions.colors[0] : \"rgb(255, 255, 255)\";\nconst options = {\n  chart: {\n    zoomType: \"x\"\n  },\n  xAxis: {\n    type: \"datetime\"\n  },\n  yAxis: {\n    title: {\n      text: \"Deaths\"\n    }\n  },\n  legend: {\n    enabled: false\n  },\n  plotOptions: {\n    area: {\n      fillColor: {\n        linearGradient: {\n          x1: 0,\n          y1: 0,\n          x2: 0,\n          y2: 1\n        },\n        stops: [[0, color], [1, Highcharts.color(color).setOpacity(0).get(\"rgba\")]]\n      },\n      marker: {\n        radius: 2\n      },\n      lineWidth: 1,\n      states: {\n        hover: {\n          lineWidth: 1\n        }\n      },\n      threshold: null\n    }\n  },\n  tooltip: {\n    pointFormat: \"{series.name}: <b>{point.y:,.0f}</b>\"\n  },\n  series: [{\n    name: \"deaths\",\n    type: \"area\",\n    data: []\n  }]\n};\nexport const StateChart = props => {\n  const [states, setStates] = useStateStats();\n  const [chartOptions, setChartOptions] = useState(options);\n  useEffect(() => {\n    if (states) {\n      const newOptions = { ...chartOptions,\n        title: {\n          text: props.state\n        }\n      };\n      console.log(\"states\", states);\n      let filtered = states.filter(s => s.state === props.state).sort((a, b) => a.datetime - b.datetime);\n      let deathData = filtered.map(f => {\n        return [f.datetime, f.death];\n      });\n      let increaseInDeathData = filtered.map(f => {\n        return [f.datetime, f.deathIncrease];\n      });\n      let hospitializedData = filtered.map(f => {\n        return [f.datetime, f.hospitalizedCurrently || 0];\n      });\n      let onVentilatorsData = filtered.map(f => {\n        return [f.datetime, f.onVentilatorCurrently || 0];\n      });\n      let inIcuCurrentlyData = filtered.map(f => {\n        return [f.datetime, f.inIcuCurrently || 0];\n      });\n      let totalTestResults = filtered.map(f => {\n        return [f.datetime, f.totalTestResults || 0];\n      });\n      let totalNegativeIncrease = filtered.map(f => {\n        return [f.datetime, f.totalNegativeIncrease || 0];\n      });\n      let totalPositiveIncrease = filtered.map(f => {\n        return [f.datetime, f.totalNegativeIncrease || 0];\n      });\n      console.log(\"stateData\");\n      newOptions.series = [{\n        name: \"Deaths\",\n        type: \"area\",\n        data: deathData\n      }, {\n        name: \"Increase in Death\",\n        type: \"area\",\n        data: increaseInDeathData\n      }, {\n        name: \"Hospitialized\",\n        type: \"area\",\n        data: hospitializedData\n      }, {\n        name: \"On Ventilator\",\n        type: \"area\",\n        data: onVentilatorsData\n      }, {\n        name: \"In ICU\",\n        type: \"area\",\n        data: inIcuCurrentlyData\n      }];\n\n      if (props.state === \"KS\") {\n        console.log(filtered);\n      } // let unemploymentStateData = data.find(\n      //   (unemployment) => unemployment.state === props.state\n      // );\n      // if (unemploymentStateData) {\n      //   Object.entries(stateData).map(([k, v]) => {\n      //     let time = k[0];\n      //     let blah = unemploymentStateData.data.find(\n      //       (datum) => datum.datetime === time\n      //     );\n      //   });\n      //}\n\n\n      setChartOptions(newOptions);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [states]);\n  return /*#__PURE__*/React.createElement(HighchartsReact, {\n    highcharts: Highcharts,\n    options: chartOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 10\n    }\n  });\n};","map":{"version":3,"sources":["/Users/westegaards/workspace/covid/frontend/src/components/charts/StateChart.tsx"],"names":["React","useEffect","useState","Highcharts","HighchartsReact","useStateStats","highChartOptions","getOptions","color","Array","isArray","colors","options","chart","zoomType","xAxis","type","yAxis","title","text","legend","enabled","plotOptions","area","fillColor","linearGradient","x1","y1","x2","y2","stops","setOpacity","get","marker","radius","lineWidth","states","hover","threshold","tooltip","pointFormat","series","name","data","StateChart","props","setStates","chartOptions","setChartOptions","newOptions","state","console","log","filtered","filter","s","sort","a","b","datetime","deathData","map","f","death","increaseInDeathData","deathIncrease","hospitializedData","hospitalizedCurrently","onVentilatorsData","onVentilatorCurrently","inIcuCurrentlyData","inIcuCurrently","totalTestResults","totalNegativeIncrease","totalPositiveIncrease"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport data from \"../../data/stats.json\";\nimport { useStateStats } from \"./StateChartWrapper\";\n\nconst highChartOptions = Highcharts.getOptions();\nconst color =\n  highChartOptions && Array.isArray(highChartOptions.colors)\n    ? highChartOptions.colors[0]\n    : \"rgb(255, 255, 255)\";\n\nconst options = {\n  chart: {\n    zoomType: \"x\",\n  },\n  xAxis: {\n    type: \"datetime\",\n  },\n  yAxis: {\n    title: {\n      text: \"Deaths\",\n    },\n  },\n  legend: {\n    enabled: false,\n  },\n  plotOptions: {\n    area: {\n      fillColor: {\n        linearGradient: {\n          x1: 0,\n          y1: 0,\n          x2: 0,\n          y2: 1,\n        },\n        stops: [\n          [0, color],\n          [1, Highcharts.color(color).setOpacity(0).get(\"rgba\")],\n        ],\n      },\n      marker: {\n        radius: 2,\n      },\n      lineWidth: 1,\n      states: {\n        hover: {\n          lineWidth: 1,\n        },\n      },\n      threshold: null,\n    },\n  },\n  tooltip: {\n    pointFormat: \"{series.name}: <b>{point.y:,.0f}</b>\",\n  },\n  series: [\n    {\n      name: \"deaths\",\n      type: \"area\",\n      data: [] as any,\n    },\n  ],\n};\n\nexport const StateChart = (props: { state: string }) => {\n  const [states, setStates] = useStateStats();\n  const [chartOptions, setChartOptions] = useState(options);\n\n  useEffect(() => {\n    if (states) {\n      const newOptions = { ...chartOptions, title: { text: props.state } };\n      console.log(\"states\", states);\n      let filtered = states\n        .filter((s) => s.state === props.state)\n        .sort((a, b) => a.datetime - b.datetime);\n      let deathData = filtered.map((f) => {\n        return [f.datetime, f.death];\n      });\n\n      let increaseInDeathData = filtered.map((f) => {\n        return [f.datetime, f.deathIncrease];\n      });\n\n      let hospitializedData = filtered.map((f) => {\n        return [f.datetime, f.hospitalizedCurrently || 0];\n      });\n\n      let onVentilatorsData = filtered.map((f) => {\n        return [f.datetime, f.onVentilatorCurrently || 0];\n      });\n\n      let inIcuCurrentlyData = filtered.map((f) => {\n        return [f.datetime, f.inIcuCurrently || 0];\n      });\n\n      let totalTestResults = filtered.map((f) => {\n        return [f.datetime, f.totalTestResults || 0];\n      });\n\n      let totalNegativeIncrease = filtered.map((f) => {\n        return [f.datetime, f.totalNegativeIncrease || 0];\n      });\n\n      let totalPositiveIncrease = filtered.map((f) => {\n        return [f.datetime, f.totalNegativeIncrease || 0];\n      });\n\n      console.log(\"stateData\");\n\n      newOptions.series = [\n        {\n          name: \"Deaths\",\n          type: \"area\",\n          data: deathData,\n        },\n        {\n          name: \"Increase in Death\",\n          type: \"area\",\n          data: increaseInDeathData,\n        },\n        {\n          name: \"Hospitialized\",\n          type: \"area\",\n          data: hospitializedData,\n        },\n        {\n          name: \"On Ventilator\",\n          type: \"area\",\n          data: onVentilatorsData,\n        },\n        {\n          name: \"In ICU\",\n          type: \"area\",\n          data: inIcuCurrentlyData,\n        },\n      ];\n\n      if (props.state === \"KS\") {\n        console.log(filtered);\n      }\n\n      // let unemploymentStateData = data.find(\n      //   (unemployment) => unemployment.state === props.state\n      // );\n\n      // if (unemploymentStateData) {\n      //   Object.entries(stateData).map(([k, v]) => {\n      //     let time = k[0];\n      //     let blah = unemploymentStateData.data.find(\n      //       (datum) => datum.datetime === time\n      //     );\n      //   });\n      //}\n\n      setChartOptions(newOptions);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [states]);\n\n  return <HighchartsReact highcharts={Highcharts} options={chartOptions} />;\n};\n"]},"metadata":{},"sourceType":"module"}